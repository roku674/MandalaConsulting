# Copyright Header Check
# This workflow ensures all source files have proper copyright headers

name: Copyright Header Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop, development, dev, master, main, default]

jobs:
  copyright-check:
    runs-on: ubuntu-latest
    # Skip if:
    # 1. PR is from github-actions bot (prevent infinite loops)
    # 2. This is the Copyright/CopyrightAdder repo itself
    # 3. PR is from a copyright-headers branch (prevent infinite loops)
    # 4. PR author is any bot (contains [bot] in username)
    # 5. PR title contains copyright-related keywords (prevent re-processing)
    # 6. PR is merging between protected branches (develop/master/main/dev/development/default)
    if: |
      github.actor != 'github-actions[bot]' && 
      github.actor != 'dependabot[bot]' &&
      github.repository != 'roku674/Copyright' &&
      github.repository != 'roku674/CopyrightAdder' &&
      !startsWith(github.head_ref, 'copyright-headers/') &&
      !contains(github.event.pull_request.user.login, '[bot]') &&
      !contains(github.event.pull_request.title, 'Copyright Additions') &&
      !contains(github.event.pull_request.title, 'Copyright Headers') &&
      !contains(github.event.pull_request.title, 'Copyright Workflow') &&
      !(contains(fromJSON('["develop", "master", "main", "dev", "development", "default"]'), github.head_ref) && 
        contains(fromJSON('["develop", "master", "main", "dev", "development", "default"]'), github.base_ref))
    permissions:
      contents: write
      pull-requests: write
      actions: write
    
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git Identity
        run: |
          # Configure git with a safe default identity for the workflow
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          echo "Git identity configured for workflow operations"
      
      - name: Self-Update Copyright Workflow
        run: |
          echo "Checking for workflow updates..."
          
          # Ensure .github/workflows directory exists
          mkdir -p .github/workflows
          
          # Download latest workflow from master
          curl -sSL https://raw.githubusercontent.com/roku674/CopyrightAdder/refs/heads/master/.github/workflows/copyright-check.yml -o .github/workflows/copyright-check.yml.tmp
          
          # Check if download was successful
          if [ ! -s ".github/workflows/copyright-check.yml.tmp" ]; then
            echo "Failed to download workflow update - continuing with current version"
            rm -f .github/workflows/copyright-check.yml.tmp
          else
            # Check if workflow file exists and differs
            if [ ! -f ".github/workflows/copyright-check.yml" ] || ! cmp -s ".github/workflows/copyright-check.yml" ".github/workflows/copyright-check.yml.tmp"; then
              echo "Updating copyright-check.yml workflow to latest version"
              mv .github/workflows/copyright-check.yml.tmp .github/workflows/copyright-check.yml
              git add .github/workflows/copyright-check.yml
              echo "Workflow updated successfully"
            else
              echo "Workflow is already up to date"
              rm .github/workflows/copyright-check.yml.tmp
            fi
          fi
      
      - name: Setup Copyright Adder
        run: |
          # Check if CopyrightAdder exists as submodule, otherwise download
          if [ -d "CopyrightAdder" ]; then
            echo "Using existing CopyrightAdder submodule"
            chmod +x CopyrightAdder/add_copyright_headers.sh
          elif [ -d "Copyright/CopyrightAdder" ]; then
            echo "Using existing Copyright/CopyrightAdder submodule"
            chmod +x Copyright/CopyrightAdder/add_copyright_headers.sh
          else
            echo "Downloading CopyrightAdder"
            mkdir -p CopyrightAdder
            curl -sSL https://raw.githubusercontent.com/roku674/Copyright/main/CopyrightAdder/add_copyright_headers.sh -o CopyrightAdder/add_copyright_headers.sh
            curl -sSL https://raw.githubusercontent.com/roku674/Copyright/main/CopyrightAdder/sources.txt -o CopyrightAdder/sources.txt
            chmod +x CopyrightAdder/add_copyright_headers.sh
          fi
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            **/*.{java,js,ts,jsx,tsx,cpp,cc,c,h,cs,py,go,rs,rb,php,sh,xml,html,sql}
      
      - name: Run Copyright Adder on changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          SOURCE_BRANCH: ${{ github.head_ref }}
        run: |
          echo "Adding copyright headers to changed files..."
          echo "Using source branch: $SOURCE_BRANCH for git history"
          
          # Ensure we have the source branch history
          git fetch origin "$SOURCE_BRANCH"
          
          # Determine script path based on submodule structure
          if [ -d "CopyrightAdder" ]; then
            SCRIPT_PATH="./CopyrightAdder/add_copyright_headers.sh"
          elif [ -d "Copyright/CopyrightAdder" ]; then
            SCRIPT_PATH="./Copyright/CopyrightAdder/add_copyright_headers.sh"
          else
            echo "Error: Could not find CopyrightAdder script"
            exit 1
          fi
          
          for file in $CHANGED_FILES; do
            if [ -f "$file" ]; then
              echo "Processing: $file"
              SOURCE_BRANCH="$SOURCE_BRANCH" $SCRIPT_PATH "$file"
            fi
          done
      
      - name: Check for changes
        id: check-changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Files missing copyright headers were found and updated."
            
            # List changed files for the PR description
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            git status --porcelain | grep -E "^\s*M" | cut -c 4-
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "All files have proper copyright headers."
          fi
      
      - name: Check for workflow updates
        id: check-workflow-updates
        run: |
          # Check if there are any workflow updates to commit
          if [[ -n $(git status --porcelain .github/workflows/copyright-check.yml 2>/dev/null) ]]; then
            echo "workflow_changes=true" >> $GITHUB_OUTPUT
            echo "Workflow updates detected"
          else
            echo "workflow_changes=false" >> $GITHUB_OUTPUT
            echo "No workflow updates needed"
          fi
      
      - name: Create new branch for copyright headers
        if: steps.check-changes.outputs.changes == 'true' || steps.check-workflow-updates.outputs.workflow_changes == 'true'
        id: create-branch
        env:
          PR_AUTHOR_EMAIL: ${{ github.event.pull_request.user.email || 'noreply@github.com' }}
          PR_AUTHOR_NAME: ${{ github.event.pull_request.user.login }}
          PR_AUTHOR_LOGIN: ${{ github.event.pull_request.user.login }}
        run: |
          # Generate unique branch name
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          NEW_BRANCH="copyright-headers/${{ github.head_ref }}-${TIMESTAMP}"
          echo "branch_name=${NEW_BRANCH}" >> $GITHUB_OUTPUT
          
          # Create and checkout new branch
          git checkout -b "${NEW_BRANCH}"
          
          # Configure git with bot identity (required for push permissions)
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          
          # Create appropriate commit message based on what changed
          if [[ "${{ steps.check-changes.outputs.changes }}" == "true" && "${{ steps.check-workflow-updates.outputs.workflow_changes }}" == "true" ]]; then
            COMMIT_MSG="Add copyright headers and update workflow"
          elif [[ "${{ steps.check-changes.outputs.changes }}" == "true" ]]; then
            COMMIT_MSG="Add copyright headers to source files"
          else
            COMMIT_MSG="Update copyright workflow"
          fi
          
          # Add co-author attribution to the original PR author
          COMMIT_MSG="${COMMIT_MSG}

Co-authored-by: ${PR_AUTHOR_NAME} <${PR_AUTHOR_LOGIN}@users.noreply.github.com>"
          
          # Create the commit
          git commit -m "${COMMIT_MSG}"
          
          # Push the new branch
          git push origin "${NEW_BRANCH}"
      
      - name: Create Pull Request
        if: steps.check-changes.outputs.changes == 'true' || steps.check-workflow-updates.outputs.workflow_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ steps.create-branch.outputs.branch_name }}';
            const baseBranch = '${{ github.base_ref }}';
            const changedFiles = `${{ steps.check-changes.outputs.changed_files }}`;
            const hasCodeChanges = '${{ steps.check-changes.outputs.changes }}' === 'true';
            const hasWorkflowChanges = '${{ steps.check-workflow-updates.outputs.workflow_changes }}' === 'true';
            
            // First, clean up ALL old copyright-headers branches (not just open PRs)
            console.log('Cleaning up old copyright-headers branches...');
            const { data: branches } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const copyrightBranches = branches.filter(branch => 
              branch.name.startsWith('copyright-headers/') && 
              branch.name !== branchName
            );
            
            console.log(`Found ${copyrightBranches.length} old copyright-headers branches to clean up`);
            
            for (const branch of copyrightBranches) {
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branch.name}`
                });
                console.log(`Deleted old branch: ${branch.name}`);
              } catch (error) {
                console.log(`Could not delete branch ${branch.name}: ${error.message}`);
              }
            }
            
            // Now check for existing open PRs from copyright-headers/* branches to the same base branch
            const existingPRs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: baseBranch
            });
            
            // Look for existing copyright PRs targeting the same branch
            const existingCopyrightPRs = existingPRs.data.filter(pr => 
              pr.head.ref.startsWith('copyright-headers/') && 
              pr.base.ref === baseBranch &&
              pr.labels.some(label => label.name === 'copyright')
            );
            
            if (existingCopyrightPRs.length > 0) {
              console.log(`Found ${existingCopyrightPRs.length} existing copyright PR(s) for branch ${baseBranch}`);
              
              // Close all existing copyright PRs for this branch
              for (const pr of existingCopyrightPRs) {
                console.log(`Closing existing PR #${pr.number} (${pr.head.ref})`);
                
                // Add closing comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: `🔄 **Superseded by new copyright check**\n\nThis PR is being closed because a new copyright check has been triggered. A fresh PR will be created with the latest changes.`
                });
                
                // Close the PR
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  state: 'closed'
                });
              }
            }
            
            let prTitle = '';
            let prBody = '';
            
            // Get original PR author information
            const originalPR = context.payload.pull_request;
            const authorName = originalPR.user.login;
            const authorUrl = originalPR.user.html_url;
            
            if (hasCodeChanges && hasWorkflowChanges) {
              prTitle = `Alexander's Anointed Copyright Additions for ${baseBranch}`;
              prBody = `## Copyright Headers Added + Workflow Updated
              
              This automated pull request adds missing copyright headers to source files and updates the copyright workflow in the \`${baseBranch}\` branch.
              
              ### Changed Files:
              \`\`\`
              ${changedFiles}
              \`\`\`
              
              ### Updates:
              - Added missing copyright headers to source files
              - Updated .github/workflows/copyright-check.yml to latest version
              
              ### Notes:
              - This PR was automatically generated by the Copyright Header Check workflow
              - Triggered by PR from [@${authorName}](${authorUrl})
              - Please review the changes before merging
              - This PR targets the base branch \`${baseBranch}\` where your changes will be merged
              
              ---
              *Generated by GitHub Actions on behalf of [@${authorName}](${authorUrl})*`;
            } else if (hasCodeChanges) {
              prTitle = `Alexander's Anointed Copyright Additions for ${baseBranch}`;
              prBody = `## Copyright Headers Added
              
              This automated pull request adds missing copyright headers to source files in the \`${baseBranch}\` branch.
              
              ### Changed Files:
              \`\`\`
              ${changedFiles}
              \`\`\`
              
              ### Notes:
              - This PR was automatically generated by the Copyright Header Check workflow
              - Triggered by PR from [@${authorName}](${authorUrl})
              - Please review the changes before merging
              - This PR targets the base branch \`${baseBranch}\` where your changes will be merged
              
              ---
              *Generated by GitHub Actions on behalf of [@${authorName}](${authorUrl})*`;
            } else {
              prTitle = `Alexander's Anointed Copyright Workflow Update for ${baseBranch}`;
              prBody = `## Copyright Workflow Updated
              
              This automated pull request updates the copyright workflow in the \`${baseBranch}\` branch.
              
              ### Updates:
              - Updated .github/workflows/copyright-check.yml to latest version
              
              ### Notes:
              - This PR was automatically generated by the Copyright Header Check workflow
              - Triggered by PR from [@${authorName}](${authorUrl})
              - Please review the changes before merging
              - This PR targets the base branch \`${baseBranch}\` where your changes will be merged
              
              ---
              *Generated by GitHub Actions on behalf of [@${authorName}](${authorUrl})*`;
            }
            
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: prTitle,
              body: prBody,
              head: branchName,
              base: baseBranch,
              labels: ['copyright', 'automated', 'github-actions', 'documentation']
            });
            
            console.log(`Created PR #${pr.data.number}: ${pr.data.html_url}`);
            
            // Add comment to original PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `⚠️ **Missing Copyright Headers Detected**\n\nI've created PR #${pr.data.number} to add missing copyright headers to your branch. Please review and merge it into your branch before this PR can be merged.`
            });
      
      - name: Clean up
        if: always()
        run: |
          rm -rf CopyrightAdder